package com.qualcomm.ftcrobotcontroller.opmodes;

import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.util.Range;

public class teleop extends OpMode {

  DcMotor rightW;
  DcMotor leftW;
  DcMotor rightR;
  DcMotor leftR;

  double rightWs;
  double leftWs;
  double rightRs;
  double leftRs;

  public teleop() {}

  //run once on op mode execution
  @Override
  public void init() {
    //create the motors

    rightW = hardwareMap.dcMotor.get("rightWheel");
    leftW = hardwareMap.dcMotor.get("leftWheel");
    rightW.setDirection(DcMotor.Direction.REVERSE);
    rightR = hardwareMap.dcMotor.get("rightRatchet");
    leftR = hardwareMap.dcMotor.get("leftRatchet");
    rightR.setDirection(DcMotor.Direction.REVERSE);
  }

  //loop run during execution of program
  @Override
  public void loop() {
    readJoysticks();
    limitVariables();
    scaleInputs();
    limitVariables();
    moveMotors();
    debug();
  }

  //run when the op mode is stopped
  @Override
  public void stop() {}


	/*
	 * ---------------------------------------------------------------------------------------------
	 * ------------------------------------- Custom functions --------------------------------------
	 * ---------------------------------------------------------------------------------------------
	 */


double si(double joyVal, double divBy) {
    /**
     * This function scales the input.
     * It makes it so that when you push the joystick forward, the robot doesn't respond in a linear way.
     * When you push it a little bit, you have more precision control over speed.
     * Pushing all the way overrides the math and jumps to 1.
     */
    if(joyVal==1) return 1;
    else if(joyVal==-1) return -1;
    else return -Math.log(-joyVal + 1) / divBy;
  }
  void readJoysticks(){
    // Y: -1 is up, 1 is down
    // X: -1 is left, 1 is right
    //Setting wheel speed variable
    rightWs = gamepad1.right_stick_y;
    leftWs = gamepad1.left_stick_y;
    rightRs = gamepad2.right_stick_y;
    leftRs = gamepad2.left_stick_y;
  }
  void limitVariables(){
    //limit the wheels etc. to -1/1
    rightWs = Range.clip(rightWs, -1, 1);
    leftWs = Range.clip(leftWs, -1, 1);
    rightRs = Range.clip(rightRs, -1, 1);
    leftRs = Range.clip(leftRs, -1, 1);

  }
  void scaleInputs() {
    //input scaling; to gain better control at low speeds
    if(rightWs>0){
      rightWs = si(rightWs, 1.5);
    }
    else {
      rightWs = -si(-rightWs, 1.5);
    }

    if(leftWs>0){
      leftWs = si(leftWs, 1.5);
    }
    else{
      leftWs = -si(-leftWs, 1.5);
    }

    rightRs = si(rightRs, 1.5);
    leftRs =  si(leftRs, 1.5);
  }
  void moveMotors(){
    //actual movement
    rightW.setPower(rightWs);
    leftW.setPower(leftWs);
    rightR.setPower(rightRs);
    leftR.setPower(leftRs);
    /*rightW.setPower(1);
    leftW.setPower(1);
    rightR.setPower(1);
    leftR.setPower(1);*/

  }
  void debug(){
    //send debug info back to driver station (getPower() with legacy returns null)
    telemetry.clearData();
    telemetry.addData("1. Left Wheel\t", leftWs);
    telemetry.addData("2. Right Wheel\t", rightWs);
    telemetry.addData("3. Left Leg\t\t\t", leftRs);
    telemetry.addData("4. Right Leg\t\t", rightRs);
    telemetry.addData("5.", "");
    telemetry.addData("6. LW Total\t\t\t", leftW.getCurrentPosition());
    telemetry.addData("7. RW Total\t\t\t", rightW.getCurrentPosition());
  }

}


//rightW.setPower(Range.clip(si(Range.clip(gamepad1.left_stick_x, 1.5), -1, 1));